Q-11. Create table given below: Salesperson and Customer

create table salesperson(
  sno int primary key,
  sname varchar(255),
  city varchar(255),
  comm int
);

insert into salesperson (sno, sname, city, comm) values
 (1001, 'Peel', 'London', .12),
 (1002, 'Serres', 'San Jose', .13),
 (1004, 'Motika', 'London', .11),
 (1007, 'Rafkin' , 'Barcelona', .15),
 (1003, 'Axelrod', 'New York', .1)
;


create table customer(
  cno int primary key,
  cname varchar(255),
  city varchar(255),
  rating int,
  sno int, 
  foreign key (sno) REFERENCES salesperson (sno)
);

insert into customer (cno, cname, city, rating, sno) values
 (201, 'Hoffman', 'London', 100, 1001),
 (202, 'Giovanne', 'Roe', 200, 1003),
 (203, 'Liu', 'Sn Jose', 300, 1002),
 (204, 'Grass' , 'Barcelona', 100, 1002),
 (206, 'Clemens', 'London', 300, 1007),
 (207, 'Pereira', 'Roe', 100, 1004)
;




Q-12. Retrieve the below data from above table
Q-13. All orders for more than $1000.
Q-14. Names and cities of all salespeople in London with commission above 0.12

select sname,city from salesperson where city='London' and comm>0.12




Q-15. All salespeople either in Barcelona or in London

select * from salesperson where city='London' or city='Barcelona';




Q-16. All salespeople with commission between 0.10 and 0.12. (Boundary values should be excluded).

select * from salesperson where comm>0.10 and comm<0.12;




Q-17. All customers excluding those with rating <= 100 unless they are located inRome.

select * from customer where rating>100 or (rating<=100 and city='Rome');



Q-18. Write a SQL statement that displays all the information about all salespeople

select * from salesperson;




Q-19. From the following table, write a SQL query to find orders that are delivered by a salesperson with ID. 5001. Return ord_no, ord_date, purch_amt.

create table orders(
  ord_no int primary key,
  purch_amt int,
  ord_date date default current_date,
  sno int,
  cno int,
  foreign key (sno) REFERENCES salesperson (sno),
  foreign key (cno) REFERENCES customer (cno)
);

select ord_no, purch_amt, ord_date from orders where sno=5001;




Q-20. From the following table, write a SQL query to select a range of products whose price is in the range Rs.200 to Rs.600. Begin and end values are included. Return pro_id, pro_name, pro_price, and pro_com.

create table item_mast(
  pro_id int primary key,
  pro_name varchar(255),
  pro_price int,
  pro_com int
);

select * from item_mast where pro_price<=600 and pro_price>=200;




Q-21. From the following table, write a SQL query to calculate the average price for a manufacturer code of 16. Return avg.

select avg(pro_price) as avg_price from item_mast where pro_com = 16;





Q-22. From the following table, write a SQL query to display the pro_name as 'Item Name' and pro_priceas 'Price in Rs.'

select pro_name AS 'Item_Name', pro_price AS 'Price_in_Rs.' from item_mast;




Q-23. From the following table, write a SQL query to find the items whose prices are higher than or equal to $250. Order the result by product price in descending, then product name in ascending. Return pro_name and pro_price.

select pro_name, pro_price from item_mast where pro_price>=250 order by pro_name and pro_price desc;




Q-24. From the following table, write a SQL query to calculate average price of the items for each company. Return average price and company code.

select pro_com, avg(pro_price) as average_price from item_mast group by pro_com;





